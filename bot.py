from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', 8000))
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'
ADMIN_CHAT_IDS = ['79100904945', '79032587332']  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# ========== –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ê–• (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ –¢–ó) ==========
categories = [
    {"id": "1", "name": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª–∏"},
    {"id": "2", "name": "–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è"},
    {"id": "3", "name": "–ü–æ–∂–∞—Ä–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "4", "name": "–õ–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "5", "name": "–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –º–æ—Å—Ç–∏–∫–∏"}
]

products = {
    "1": [
        {
            "id": "1_1",
            "name": "–°–¢–° ¬´–ü–†–û–§¬ª",
            "description": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –¥–ª—è –∫—Ä–æ–≤–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –∏ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π.",
            "specs": ["–ö—Ä–æ–≤–ª—è –∏–∑ —Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª–∏", "–ö—Ä–æ–≤–ª—è –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–Ω—ã"],
            "coating": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": 3475, "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": 3735},
            "photo": "–°–¢–° ¬´–ü–†–û–§¬ª.jpg"
        },
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...
    ],
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_carts = {}  # –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ========== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ==========
def format_product_message(product, selected_options=None):
    message = f"üì¶ <b>{product['name']}</b>\n\n"
    message += f"üìù <i>{product['description']}</i>\n\n"
    
    if selected_options:
        for option, value in selected_options.items():
            message += f"üîπ {option}: {value}\n"
    
    if 'price' in product:
        if isinstance(product['price'], dict):
            message += "\nüí∞ –¶–µ–Ω—ã:\n"
            for coating, price in product['price'].items():
                message += f"  ‚Ä¢ {coating}: {price} —Ä—É–±./—à—Ç\n"
        else:
            message += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±./—à—Ç\n"
    
    return message

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_carts[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    user_states[user_id] = "MAIN_MENU"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")],
        [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –û–û–û ¬´–°–¢–°¬ª!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –í–°–ï —Ç–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å, —Ü–µ–Ω—ã –∑–∞–≤–æ–¥–∞ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è, "
        "–æ—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç 1 –¥–Ω—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω-—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ "
        "—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏!"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def about_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    about_text = (
        "üè¢ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
        "–ö–æ–º–ø–∞–Ω–∏—è –û–û–û ¬´–°–¢–°¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–æ–≤–ª–∏ —Å 2014 –≥–æ–¥–∞.\n\n"
        "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏, –∞ –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –æ–ø—ã—Ç–æ–º –æ—Ç 5 –ª–µ—Ç.\n\n"
        "–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
        "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='http://—ç–±–∫-—Å—Ç—Å.—Ä—Ñ'>—ç–±–∫-—Å—Ç—Å.—Ä—Ñ</a>"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(about_text, reply_markup=reply_markup, parse_mode="HTML")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    contacts_text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–ù–∞—à e-mail: ctcnet@yandex.ru\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üì© –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(contacts_text, reply_markup=reply_markup, parse_mode="HTML")

# ========== –ö–ê–¢–ê–õ–û–ì –ò –ö–û–†–ó–ò–ù–ê ==========
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(cat["name"], callback_data=f"cat_{cat['id']}")]
        for cat in categories
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üìö <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                reply_markup=reply_markup, 
                                parse_mode="HTML")

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("_")[1]
    
    if category_id not in products:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    
    keyboard = [
        [InlineKeyboardButton(product["name"], callback_data=f"prod_{product['id']}")]
        for product in products[category_id]
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üè∑ <b>{categories[int(category_id)-1]['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", 
                                reply_markup=reply_markup, 
                                parse_mode="HTML")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_state = user_states.get(user_id, "MAIN_MENU")
    
    if current_state == "AWAITING_QUESTION":
        question = update.message.text
        await send_question_to_admin(update, context, question)
        user_states[user_id] = "MAIN_MENU"
        
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üì© –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )

async def send_question_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, question):
    user = update.effective_user
    message = (
        f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.id}\n\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(about_company, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(contacts, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(show_category_products, pattern="^cat_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com/{TOKEN}"
    )

if __name__ == '__main__':
    main()
