from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PORT = int(os.environ.get('PORT', 8000))

# ========== –¢–û–ö–ï–ù ==========
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'

# ========== –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ê–• ==========
products = [
    {
        "id": "1",
        "name": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—Ç—É–ª",
        "description": "–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–π —Å—Ç—É–ª —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.",
        "dimensions": "50x50x85 —Å–º",
        "material": "–ú–∞—Å—Å–∏–≤ –¥—É–±–∞",
        "production_time": "7 –¥–Ω–µ–π",
        "advantages": "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–æ—á–Ω–æ—Å—Ç—å, –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å",
        "price": "5500 —Ä—É–±."
    },
    {
        "id": "2",
        "name": "–ß–µ—Ö–æ–ª –¥–ª—è iPhone",
        "description": "–ó–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–µ–π.",
        "dimensions": "16x9x1 —Å–º",
        "material": "–¢–ü–£ + –ø–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç",
        "production_time": "3 –¥–Ω—è",
        "advantages": "–õ—ë–≥–∫–∏–π, —É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π, —Å—Ç–∏–ª—å–Ω—ã–π",
        "price": "990 —Ä—É–±."
    }
]

# ========== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========
def product_message(product):
    return (f"üì¶ <b>{product['name']}</b>\n\n"
            f"üìù <i>{product['description']}</i>\n\n"
            f"üìè –ì–∞–±–∞—Ä–∏—Ç—ã: {product['dimensions']}\n"
            f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {product['material']}\n"
            f"‚è≥ –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {product['production_time']}\n"
            f"‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {product['advantages']}\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']}")

# ========== –ö–û–ú–ê–ù–î–ê /start ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton(product["name"], callback_data=product["id"])
    ] for product in products]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                                  reply_markup=reply_markup)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data
    product = next((p for p in products if p["id"] == product_id), None)
    if product:
        await query.edit_message_text(text=product_message(product),
                                    parse_mode="HTML")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com {TOKEN}"
    )
