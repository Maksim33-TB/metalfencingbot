from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', 8000))
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'
ADMIN_CHAT_IDS = ['79100904945', '79032587332']  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# ========== –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ê–• ==========
categories = [
    {"id": "1", "name": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª–∏"},
    {"id": "2", "name": "–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è"},
    {"id": "3", "name": "–ü–æ–∂–∞—Ä–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "4", "name": "–õ–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "5", "name": "–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –º–æ—Å—Ç–∏–∫–∏"}
]

products = {
    "1": [
        {
            "id": "1_1",
            "name": "–°–¢–° ¬´–ü–†–û–§¬ª",
            "description": (
                "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–ü–†–û–§¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫—Ä–æ–≤–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—à–µ –ù–°40 –∏ —Å–µ–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–∏ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.\n\n"
                "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢.\n\n"
                "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:\n"
                "1. –¢—Ä—É–±–∞ –ø–ª–æ—Å–∫–æ–æ–≤–∞–ª Zn 45√ó25 ‚Äì 2 —à—Ç.\n"
                "2. –ö—Ä–æ–Ω—à—Ç–µ–π–Ω —É—Å–∏–ª–µ–Ω–Ω—ã–π –°–¢–° —Å –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–π –±—É—Ç–∏–ª–æ-–∫–∞—É—á—É–∫–æ–≤–æ–π –ª–µ–Ω—Ç–æ–π, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π, —Ç–æ–ª—â–∏–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ 2 –º–º ‚Äì 4 —à—Ç.\n"
                "3. –ó–∞–≥–ª—É—à–∫–∏ 45—Ö25 ‚Äì 4 —à—Ç."
            ),
            "specs": ["–ö—Ä–æ–≤–ª—è –∏–∑ —Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª–∏", "–ö—Ä–æ–≤–ª—è –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–Ω—ã"],
            "coating": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": 3475, "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": 3735},
            "photo": "–°–¢–° ¬´–ü–†–û–§¬ª.jpg"
        }
    ]
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_carts = {}  # –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_selections = {}  # –í—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ========== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ==========
def format_product_message(product, selected_options=None):
    message = f"üì¶ <b>{product['name']}</b>\n\n"
    message += f"üìù <i>{product['description']}</i>\n\n"
    
    if selected_options:
        for option, value in selected_options.items():
            if option == "–¶–≤–µ—Ç, RAL Classic" and value == "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                continue
            message += f"üîπ {option}: {value}\n"
    
    if 'price' in product:
        if isinstance(product['price'], dict):
            if selected_options and '–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ' in selected_options:
                coating = selected_options['–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ']
                price = product['price'].get(coating, 0)
                message += f"\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±./—à—Ç\n"
            else:
                message += "\nüí∞ –¶–µ–Ω—ã:\n"
                for coating, price in product['price'].items():
                    message += f"  ‚Ä¢ {coating}: {price} —Ä—É–±./—à—Ç\n"
        else:
            message += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±./—à—Ç\n"
    
    return message

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_carts[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    user_states[user_id] = "MAIN_MENU"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_selections[user_id] = {}  # –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")],
        [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –û–û–û ¬´–°–¢–°¬ª!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –í–°–ï —Ç–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å, —Ü–µ–Ω—ã –∑–∞–≤–æ–¥–∞ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è, "
        "–æ—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç 1 –¥–Ω—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω-—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ "
        "—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏!"
    )
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)

async def about_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    about_text = (
        "üè¢ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
        "–ö–æ–º–ø–∞–Ω–∏—è –û–û–û ¬´–°–¢–°¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–æ–≤–ª–∏ —Å 2014 –≥–æ–¥–∞.\n\n"
        "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏, –∞ –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –æ–ø—ã—Ç–æ–º –æ—Ç 5 –ª–µ—Ç.\n\n"
        "–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
        "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='http://—ç–±–∫-—Å—Ç—Å.—Ä—Ñ'>—ç–±–∫-—Å—Ç—Å.—Ä—Ñ</a>"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(about_text, reply_markup=reply_markup, parse_mode="HTML")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    contacts_text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–ù–∞—à e-mail: ctcnet@yandex.ru\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üì© –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(contacts_text, reply_markup=reply_markup, parse_mode="HTML")

# ========== –ö–ê–¢–ê–õ–û–ì –ò –ö–û–†–ó–ò–ù–ê ==========
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    user_states[user_id] = "CATALOG"
    
    keyboard = [
        [InlineKeyboardButton(cat["name"], callback_data=f"cat_{cat['id']}")]
        for cat in categories
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üìö <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                reply_markup=reply_markup, 
                                parse_mode="HTML")

async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("_")[1]
    user_id = str(query.from_user.id)
    user_states[user_id] = f"CATEGORY_{category_id}"
    
    if category_id not in products:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    
    keyboard = [
        [InlineKeyboardButton(product["name"], callback_data=f"prod_{product['id']}")]
        for product in products[category_id]
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üè∑ <b>{categories[int(category_id)-1]['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", 
                                reply_markup=reply_markup, 
                                parse_mode="HTML")

async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[1]
    user_id = str(query.from_user.id)
    user_states[user_id] = f"PRODUCT_{product_id}"
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
    product = None
    for cat in products.values():
        for p in cat:
            if p['id'] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_selections[user_id] = {
        "product_id": product_id,
        "product": product,
        "selected_options": {}
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    keyboard = []
    if 'specs' in product and product['specs'] and product['specs'][0] != "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
        keyboard.append([InlineKeyboardButton("üìå –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"spec_{product_id}")])
    
    keyboard.append([InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_{product_id.split('_')[0]}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        format_product_message(product),
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def select_specification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[1]
    user_id = str(query.from_user.id)
    
    product = None
    for cat in products.values():
        for p in cat:
            if p['id'] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    keyboard = [
        [InlineKeyboardButton(spec, callback_data=f"select_spec_{product_id}_{i}")]
        for i, spec in enumerate(product['specs'])
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"prod_{product_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def handle_spec_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, product_id, spec_index = query.data.split("_")[1:]
    spec_index = int(spec_index)
    user_id = str(query.from_user.id)
    
    product = None
    for cat in products.values():
        for p in cat:
            if p['id'] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    user_selections[user_id]["selected_options"]["–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"] = product['specs'][spec_index]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–∫—Ä—ã—Ç–∏—è
    keyboard = [
        [InlineKeyboardButton(coating, callback_data=f"select_coating_{product_id}_{i}")]
        for i, coating in enumerate(product['coating'])
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"spec_{product_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üõ° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_coating_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, product_id, coating_index = query.data.split("_")[1:]
    coating_index = int(coating_index)
    user_id = str(query.from_user.id)
    
    product = None
    for cat in products.values():
        for p in cat:
            if p['id'] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    selected_coating = product['coating'][coating_index]
    user_selections[user_id]["selected_options"]["–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ"] = selected_coating
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞", –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç
    if selected_coating == "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞":
        keyboard = [
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Ü–≤–µ—Ç RAL", callback_data=f"enter_ral_{product_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_coating_{product_id}_0")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ –¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É RAL Classic (—á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=reply_markup
        )
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await select_quantity(update, context, product_id)

async def enter_ral_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[2]
    user_id = str(query.from_user.id)
    user_states[user_id] = f"AWAITING_RAL_{product_id}"
    
    await query.edit_message_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —Ü–≤–µ—Ç–∞ RAL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3005):"
    )

async def select_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id=None):
    if not product_id:
        query = update.callback_query
        await query.answer()
        product_id = query.data.split("_")[2]
    
    user_id = str(update.effective_user.id)
    user_states[user_id] = f"AWAITING_QUANTITY_{product_id}"
    
    product = None
    for cat in products.values():
        for p in cat:
            if p['id'] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await update.message.reply_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ handle_coating_selection, –∏—Å–ø–æ–ª—å–∑—É–µ–º query
    if hasattr(update, 'callback_query'):
        query = update.callback_query
        await query.edit_message_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–≤ —à—Ç—É–∫–∞—Ö):"
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ RAL —Ü–≤–µ—Ç–∞
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–≤ —à—Ç—É–∫–∞—Ö):"
        )

async def handle_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_state = user_states.get(user_id, "")
    
    if not current_state.startswith("AWAITING_QUANTITY_"):
        return
    
    product_id = current_state.split("_")[2]
    
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    user_selections[user_id]["selected_options"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = quantity
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
    product = user_selections[user_id]["product"]
    selected_options = user_selections[user_id]["selected_options"]
    
    if '–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ' in selected_options:
        coating = selected_options['–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ']
        price_per_item = product['price'].get(coating, 0)
        total_price = price_per_item * quantity
        selected_options["–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞"] = total_price
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    keyboard = [
        [InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"confirm_add_{product_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"prod_{product_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n{format_product_message(product, user_selections[user_id]['selected_options'])}\n\n"
        f"üîÑ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {selected_options.get('–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞', 0)} —Ä—É–±.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def confirm_add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[2]
    user_id = str(query.from_user.id)
    
    if user_id not in user_selections or user_selections[user_id]["product_id"] != product_id:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item = {
        "product": user_selections[user_id]["product"],
        "selected_options": user_selections[user_id]["selected_options"].copy()
    }
    
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    user_carts[user_id].append(cart_item)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    keyboard = [
        [InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")],
        [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        reply_markup=reply_markup
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_state = user_states.get(user_id, "MAIN_MENU")
    
    if current_state.startswith("AWAITING_RAL_"):
        product_id = current_state.split("_")[2]
        ral_color = update.message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è RAL —Ü–≤–µ—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã)
        if not (ral_color.isdigit() and len(ral_color) == 4):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ RAL (—á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã):")
            return
        
        user_selections[user_id]["selected_options"]["–¶–≤–µ—Ç, RAL Classic"] = f"RAL {ral_color}"
        await select_quantity(update, context, product_id)
    
    elif current_state.startswith("AWAITING_QUANTITY_"):
        await handle_quantity_input(update, context)
    
    elif current_state == "AWAITING_QUESTION":
        question = update.message.text
        await send_question_to_admin(update, context, question)
        user_states[user_id] = "MAIN_MENU"
        
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üì© –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )

async def send_question_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, question):
    user = update.effective_user
    message = (
        f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.id}\n\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(about_company, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(contacts, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(show_category_products, pattern="^cat_"))
    app.add_handler(CallbackQueryHandler(show_product, pattern="^prod_"))
    app.add_handler(CallbackQueryHandler(select_specification, pattern="^spec_"))
    app.add_handler(CallbackQueryHandler(handle_spec_selection, pattern="^select_spec_"))
    app.add_handler(CallbackQueryHandler(handle_coating_selection, pattern="^select_coating_"))
    app.add_handler(CallbackQueryHandler(enter_ral_color, pattern="^enter_ral_"))
    app.add_handler(CallbackQueryHandler(confirm_add_to_cart, pattern="^confirm_add_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com/{TOKEN}"
    )

if __name__ == '__main__':
    main() 
