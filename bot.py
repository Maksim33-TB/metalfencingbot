from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PORT = int(os.environ.get('PORT', 8000))

# ========== –¢–û–ö–ï–ù ==========
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'

# ========== –ê–î–ú–ò–ù–´ –î–õ–Ø –ó–ê–Ø–í–û–ö ==========
MANAGER_CHAT_ID = "@MaksimS1989"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID
ADMIN_CHAT_ID = "777000"     # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID

# ========== –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ê–• ==========

products_data = {
    "snow_retainer": [
        {
            "id": "1",
            "name": "–°–¢–° ¬´–ü–†–û–§¬ª",
            "description": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–ü–†–û–§¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫—Ä–æ–≤–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—à–µ –ù–°40 –∏ —Å–µ–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.",
            "specifications": ["–ö—Ä–æ–≤–ª—è –∏–∑ —Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª–∏", "–ö—Ä–æ–≤–ª—è –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–Ω—ã"],
            "coating_options": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": "3475 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "3735 —Ä—É–±./—à—Ç"},
            "image": "–°–¢–°_¬´–ü–†–û–§¬ª.jpg"
        },
        {
            "id": "2",
            "name": "–°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å–∏–ª–µ–Ω–Ω—ã–π¬ª",
            "description": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å–∏–ª–µ–Ω–Ω—ã–π¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
            "specifications": ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"],
            "coating_options": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": "2805 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "3100 —Ä—É–±./—à—Ç"},
            "image": "–°–¢–°_¬´–£—Å–∏–ª–µ–Ω–Ω—ã–π_—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π¬ª.jpg"
        },
        {
            "id": "3",
            "name": "–°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π¬ª",
            "description": "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
            "specifications": ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"],
            "coating_options": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": "2350 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "2640 —Ä—É–±./—à—Ç"},
            "image": "–°–¢–°_¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π¬ª.jpg"
        }
    ],
    "roof_railing": [
        {
            "id": "4",
            "name": "–°–¢–° ¬´–î–ª—è –ü–í–• –∫—Ä–æ–≤–µ–ª—å¬ª",
            "description": "–ö—Ä–æ–≤–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –°–¢–° ¬´–î–ª—è –ü–í–• –∫—Ä–æ–≤–µ–ª—å¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º, –≤—ã—Å–æ—Ç–æ–π 600/800/1200 –º–º.",
            "heights": ["600 –º–º", "800 –º–º", "1200 –º–º"],
            "cross_tubes": {"600 –º–º": ["2"], "800 –º–º": ["2", "3"], "1200 –º–º": ["2", "3"]},
            "coating_options": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {
                "600 –º–º": {"–¶–∏–Ω–∫": "7650 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "8100 —Ä—É–±./—à—Ç"},
                "800 –º–º": {"–¶–∏–Ω–∫": "7830 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "8290 —Ä—É–±./—à—Ç"},
                "1200 –º–º": {"–¶–∏–Ω–∫": "9120 —Ä—É–±./—à—Ç", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": "9540 —Ä—É–±./—à—Ç"}
            },
            "image": "–ö—Ä–æ–≤–µ–ª—å–Ω–æ–µ_–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ_–°–¢–°_¬´–î–ª—è_–ü–í–•_–∫—Ä–æ–≤–µ–ª—å¬ª.jpg"
        }
    ],
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

# ========== –•–†–ê–ù–ò–õ–ò–©–ï ==========
user_state = {}  # {user_id: {"stage": "...", "product": {}, "quantity": "", ...}}
user_cart = {}   # {user_id: [{"product": ..., "quantity": ..., "total_price": ...}, ...]}

# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="company")],
        [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ========== –ö–ê–¢–ê–õ–û–ì –ú–ï–ù–Æ ==========
def catalog_menu():
    buttons = [
        [InlineKeyboardButton("‚ùÑÔ∏è –°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª–∏", callback_data="snow_retainer")],
        [InlineKeyboardButton("ü™ú –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è", callback_data="roof_railing")],
        [InlineKeyboardButton("üî• –ü–æ–∂–∞—Ä–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã", callback_data="fire_ladder")],
        [InlineKeyboardButton("ü™ú –õ–µ—Å—Ç–Ω–∏—Ü—ã", callback_data="ladder")],
        [InlineKeyboardButton("üåâ –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –º–æ—Å—Ç–∏–∫–∏", callback_data="bridge")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(buttons)

# ========== –°–û–û–ë–©–ï–ù–ò–ï –û –¢–û–í–ê–†–ï ==========
def product_message(product):
    message = f"üì¶ <b>{product['name']}</b>\n\nüìù <i>{product['description']}</i>\n\n"

    if 'specifications' in product and product['specifications'][0] != "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
        message += f"üß± –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {'/'.join(product['specifications'])}\n"

    if 'heights' in product and product['heights'] and product['heights'][0] != "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
        message += f"üìê –í—ã—Å–æ—Ç–∞: {'/'.join(product['heights'])}\n"

    if 'cross_tubes' in product and any(product['cross_tubes'].values()):
        message += f"üß± –ö–æ–ª-–≤–æ –ø–æ–ø–µ—Ä–µ—á–Ω—ã—Ö —Ç—Ä—É–±: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã\n"

    message += f"üé® –ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {'/'.join(product['coating_options'])}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {product['price']}"
    return message

# ========== –ö–û–ú–ê–ù–î–ê /start ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"stage": "main_menu"}
    user_cart[user_id] = []

    await update.message.reply_text(
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –û–û–û ¬´–°–¢–°¬ª! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –í–°–ï —Ç–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å, —Ü–µ–Ω—ã –∑–∞–≤–æ–¥–∞ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è, –æ—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç 1 –¥–Ω—è.\n\n"
        "üõí –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω-—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏!",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_state.get(user_id, {"stage": "main_menu"})
    current_stage = state["stage"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if data == "main_menu":
        user_state[user_id]["stage"] = "main_menu"
        await query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu()
        )

    elif data == "company":
        company_text = (
            "üèõ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
            "–ö–æ–º–ø–∞–Ω–∏—è –û–û–û ¬´–°–¢–°¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–æ–≤–ª–∏ —Å 2014 –≥–æ–¥–∞.\n"
            "–ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏, –∞ –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –æ–ø—ã—Ç–æ–º –æ—Ç 5 –ª–µ—Ç.\n"
            "–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n"
            "üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://—ç–±–∫-—Å—Ç—Å.—Ä—Ñ'>—ç–±–∫-—Å—Ç—Å.—Ä—Ñ</a>" 
        )
        await query.edit_message_text(company_text, parse_mode="HTML")
        await query.message.reply_text("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

    elif data == "contacts":
        contacts_text = (
            "üì¨ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
            "üìß –ù–∞—à e-mail: ctcnet@yandex.ru\n"
            "üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø–æ —ç—Ç–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n"
            "+7 910 090 4945 ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "+7 903 258 73 32 ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        )
        keyboard = [[InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]]
        await query.edit_message_text(contacts_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
        await query.message.reply_text("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

    elif data == "ask_question":
        user_state[user_id]["stage"] = "awaiting_question"
        await query.edit_message_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    elif data == "catalog":
        user_state[user_id]["stage"] = "catalog"
        buttons = []
        for cat in products_data.keys():
            buttons.append([InlineKeyboardButton(cat.capitalize(), callback_data=f"catalog_{cat}")])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.startswith("catalog_"):
        category = data.split("_")[1]
        user_state[user_id]["stage"] = f"select_{category}"
        buttons = []
        for idx, item in enumerate(products_data[category], start=1):
            buttons.append([InlineKeyboardButton(item['name'], callback_data=f"{category}_{idx}")]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")])
        await query.edit_message_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.startswith("snow_retainer_"):
        model_id = data.split("_")[2]
        product = next((p for p in products_data["snow_retainer"] if p["id"] == model_id), None)
        if product:
            user_state[user_id]["stage"] = "select_coating_snow"
            user_state[user_id]["product"] = product
            coating_buttons = [[InlineKeyboardButton(coat, callback_data=f"coating_{coat}_snow")]
                               for coat in product["coating_options"]]
            coating_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_snow_retainer")])
            await query.edit_message_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",
                                        reply_markup=InlineKeyboardMarkup(coating_buttons))

    elif data.startswith("roof_railing_"):
        model_id = data.split("_")[2]
        product = next((p for p in products_data["roof_railing"] if p["id"] == model_id), None)
        if product:
            user_state[user_id]["stage"] = "select_height_roof"
            user_state[user_id]["product"] = product
            height_buttons = [[InlineKeyboardButton(h, callback_data=f"height_{h}_roof")] for h in product["heights"]]
            height_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_roof_railing")])
            await query.edit_message_text("üìê –í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Å–æ—Ç—É:", reply_markup=InlineKeyboardMarkup(height_buttons))

    elif data.startswith("height_"):
        height = data.split("_")[1]
        type_ = data.split("_")[2]
        user_state[user_id]["height"] = height
        user_state[user_id]["stage"] = "select_cross_tubes_roof"
        cross_tubes = user_state[user_id]["product"]["cross_tubes"].get(height, [])
        if len(cross_tubes) <= 1:
            user_state[user_id]["cross_tubes"] = cross_tubes[0] if cross_tubes else "–ù–µ—Ç"
            user_state[user_id]["stage"] = "select_coating_roof"
            coating_buttons = [[InlineKeyboardButton(coat, callback_data=f"coating_{coat}_roof")] 
                               for coat in user_state[user_id]["product"]["coating_options"]]
            coating_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog_roof_railing")])
            await query.edit_message_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:", reply_markup=InlineKeyboardMarkup(coating_buttons))
        else:
            tube_buttons = [[InlineKeyboardButton(t, callback_data=f"tubes_{t}_roof")] for t in cross_tubes]
            tube_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog_roof_railing")]
            await query.edit_message_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–µ—Ä–µ—á–Ω—ã—Ö —Ç—Ä—É–±:", reply_markup=InlineKeyboardMarkup(tube_buttons))

    elif data.startswith("tubes_"):
        tubes = data.split("_")[1]
        user_state[user_id]["cross_tubes"] = tubes
        user_state[user_id]["stage"] = "select_coating_roof"
        coating_buttons = [[InlineKeyboardButton(coat, callback_data=f"coating_{coat}_roof")] 
                           for coat in user_state[user_id]["product"]["coating_options"]]
        coating_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog_roof_railing")])
        await query.edit_message_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:", reply_markup=InlineKeyboardMarkup(coating_buttons))

    elif data.startswith("coating_"):
        coating = data.split("_")[1]
        category = data.split("_")[2]
        user_state[user_id]["coating"] = coating

        if coating == "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞":
            ral_buttons = [[InlineKeyboardButton(f"RAL {i}", callback_data=f"ral_{i}_{category}")] for i in range(1000, 9999)]
            ral_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_{category}")])
            await query.edit_message_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç RAL:", reply_markup=InlineKeyboardMarkup(ral_buttons))
        else:
            user_state[user_id]["stage"] = "enter_quantity"
            await query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:")

    elif data.startswith("ral_"):
        ral_code = data.split("_")[1]
        category = data.split("_")[3]
        user_state[user_id]["ral"] = ral_code
        user_state[user_id]["stage"] = "enter_quantity"
        await query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:")

    elif data == "add_to_cart":
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        product = user_state[user_id].get("product")
        quantity = user_state[user_id].get("quantity", "1")
        price = product["price"][user_state[user_id]["coating"]]
        total_price = int(price.split()[0]) * int(quantity)

        user_cart[user_id].append({
            "product": product,
            "quantity": quantity,
            "total_price": f"{total_price} —Ä—É–±."
        })

        user_state[user_id]["stage"] = "in_cart"
        cart_buttons = [
            [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="continue_shopping")],
            [InlineKeyboardButton("üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="form_order")]
        ]
        cart_text = "üõí –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å:\n\n"
        for idx, item in enumerate(user_cart[user_id]):
            cart_text += f"{idx + 1}. {item['product']['name']} x{item['quantity']} - {item['total_price']}\n"

        await query.edit_message_text(cart_text, reply_markup=InlineKeyboardMarkup(cart_buttons))

    elif data == "continue_shopping":
        user_state[user_id]["stage"] = "catalog"
        await query.edit_message_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=catalog_menu())

    elif data == "form_order":
        user_state[user_id]["stage"] = "order_form_name"
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    elif data == "back_to_catalog":
        user_state[user_id]["stage"] = "catalog"
        await query.edit_message_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=catalog_menu())

    elif data == "back_to_main":
        await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        user_state[user_id]["stage"] = "main_menu"

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_state.get(user_id, {}).get("stage") == "awaiting_question":
        phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
        email = "–ù–µ —É–∫–∞–∑–∞–Ω"
        message = (
            f"‚ùó –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {text}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìß Email: {email}"
        )
        await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=message)
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    elif user_state.get(user_id, {}).get("stage") == "order_form_name":
        user_state[user_id]["name"] = text
        user_state[user_id]["stage"] = "order_form_phone"
        await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

    elif user_state.get(user_id, {}).get("stage") == "order_form_phone":
        user_state[user_id]["phone"] = text
        user_state[user_id]["stage"] = "order_form_email"
        await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

    elif user_state.get(user_id, {}).get("stage") == "order_form_email":
        user_state[user_id]["email"] = text or "–ù–µ —É–∫–∞–∑–∞–Ω"
        await send_order_summary(update, context)

    elif user_state.get(user_id, {}).get("stage") == "enter_quantity":
        user_state[user_id]["quantity"] = text
        product = user_state[user_id]["product"]
        coating = user_state[user_id]["coating"]
        price = product["price"][coating]
        total_price = int(price.split()[0]) * int(text)

        cart_buttons = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_to_cart")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change_quantity")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog")]
        ]

        summary = (
            f"üì¶ <b>{product['name']}</b>\n"
            f"üé® –ü–æ–∫—Ä—ã—Ç–∏–µ: {coating}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {text}\n"
            f"üí∞ –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."
        )

        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(cart_buttons))

# ========== –û–¢–ü–†–ê–í–ö–ê –°–í–û–î–ù–û–ô –ó–ê–Ø–í–ö–ò ==========
async def send_order_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    order = user_state[user_id]
    cart = user_cart[user_id]

    summary = (
        "üìÑ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n\n"
        f"üë§ –ò–º—è: {order.get('name', '')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone', '')}\n"
        f"üìß Email: {order.get('email', '')}\n\n"
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
    )

    total = 0
    for item in cart:
        summary += f"- {item['product']['name']} x{item['quantity']} ‚Äî {item['total_price']}\n"
        total += int(item['total_price'].split()[0])

    summary += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total} —Ä—É–±."

    await update.callback_query.edit_message_text(summary, parse_mode="HTML")
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=summary, parse_mode="HTML")
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary, parse_mode="HTML")

    confirmation = (
        "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å!\n\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç, –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
        "‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –ü–Ω.-–ü—Ç.: 9:00‚Äî17:00\n"
        "‚Ä¢ –î–∞–ª–µ–µ –º—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é\n"
        "‚Ä¢ –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –¥–Ω—è\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –∫ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –¢–ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏)\n"
        "‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –¢–ö –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —á–∞—Ç"
    )
    await update.effective_message.reply_text(confirmation, reply_markup=main_menu())

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com/{TOKEN}" 
    )
