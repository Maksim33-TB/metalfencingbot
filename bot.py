from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', 8000))
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'
ADMIN_CHAT_IDS = ['79100904945', '79032587332']  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
products = [
    {
        "id": "sts_prof",
        "name": "–°–¢–° ¬´–ü–†–û–§¬ª",
        "description": (
            "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–ü–†–û–§¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫—Ä–æ–≤–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—à–µ –ù–°40 –∏ "
            "—Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–∏ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.\n\n"
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢.\n\n"
            "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:\n"
            "‚Ä¢ –¢—Ä—É–±–∞ –ø–ª–æ—Å–∫–æ–æ–≤–∞–ª Zn 45√ó25 ‚Äì 2 —à—Ç.\n"
            "‚Ä¢ –ö—Ä–æ–Ω—à—Ç–µ–π–Ω —É—Å–∏–ª–µ–Ω–Ω—ã–π –°–¢–° —Å –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–π –±—É—Ç–∏–ª–æ-–∫–∞—É—á—É–∫–æ–≤–æ–π –ª–µ–Ω—Ç–æ–π, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π, —Ç–æ–ª—â–∏–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ 2 –º–º ‚Äì 4 —à—Ç.\n"
            "‚Ä¢ –ó–∞–≥–ª—É—à–∫–∏ 45—Ö25 ‚Äì 4 —à—Ç."
        ),
        "specs": ["–ö—Ä–æ–≤–ª—è –∏–∑ —Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª–∏", "–ö—Ä–æ–≤–ª—è –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–Ω—ã"],
        "coatings": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
        "colors": {
            "RAL 3003": "–†—É–±–∏–Ω–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π",
            "RAL 3005": "–í–∏–Ω–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π",
            "RAL 5005": "–°–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω–∏–π",
            "RAL 6005": "–ó–µ–ª–µ–Ω—ã–π –º–æ—Ö",
            "RAL 7004": "–°–µ—Ä—ã–π",
            "RAL 8017": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π",
            "RAL 9003": "–ë–µ–ª—ã–π"
        },
        "prices": {
            "–¶–∏–Ω–∫": 3475,
            "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": 3735
        }
    }
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def format_product_info(product_id, user_id):
    product = next(p for p in products if p["id"] == product_id)
    data = user_data.get(user_id, {})
    
    text = f"<b>{product['name']}</b>\n\n"
    text += f"<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i>\n{product['description']}\n\n"
    
    if "spec" in data:
        text += f"<i>–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:</i> {data['spec']}\n"
    
    if "coating" in data:
        text += f"<i>–ü–æ–∫—Ä—ã—Ç–∏–µ:</i> {data['coating']}\n"
        if data['coating'] == "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞" and "color" in data:
            text += f"<i>–¶–≤–µ—Ç (RAL):</i> {data['color']}\n"
    
    if "quantity" in data and "coating" in data:
        price = product['prices'][data['coating']]
        total = price * data['quantity']
        text += f"\n<i>–¶–µ–Ω–∞:</i> {price} —Ä—É–±./—à—Ç.\n"
        text += f"<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</i> {data['quantity']} —à—Ç.\n"
        text += f"<b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±."
    
    return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(product["name"], callback_data=f"product_{product['id']}")] 
               for product in products]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id] = {"product_id": product_id}
    
    product = next(p for p in products if p["id"] == product_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await query.edit_message_text(
        text=format_product_info(product_id, user_id),
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    keyboard = [[InlineKeyboardButton(spec, callback_data=f"spec_{spec}")] for spec in product["specs"]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def handle_spec_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    spec = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id]["spec"] = spec
    
    product_id = user_data[user_id]["product_id"]
    product = next(p for p in products if p["id"] == product_id)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ
    keyboard = [[InlineKeyboardButton(coating, callback_data=f"coating_{coating}")] 
               for coating in product["coatings"]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=format_product_info(product_id, user_id),
        parse_mode="HTML"
    )
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_coating_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    coating = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id]["coating"] = coating
    
    product_id = user_data[user_id]["product_id"]
    product = next(p for p in products if p["id"] == product_id)
    
    if coating == "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞":
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç
        colors = list(product["colors"].items())
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"color_{code}") for code, name in colors[i:i+2]]
            for i in range(0, len(colors), 2)
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=format_product_info(product_id, user_id),
            parse_mode="HTML"
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (RAL Classic):",
            reply_markup=reply_markup
        )
    else:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        await query.edit_message_text(
            text=format_product_info(product_id, user_id),
            parse_mode="HTML"
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç.):",
            reply_markup=None
        )

async def handle_color_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    color_code = query.data.split("_")[1]
    user_id = query.from_user.id
    user_data[user_id]["color"] = f"{color_code} ({products[0]['colors'][color_code]})"
    
    product_id = user_data[user_id]["product_id"]
    await query.edit_message_text(
        text=format_product_info(product_id, user_id),
        parse_mode="HTML"
    )
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç.):",
        reply_markup=None
    )

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError
        
        user_data[user_id]["quantity"] = quantity
        product_id = user_data[user_id]["product_id"]
        
        await update.message.reply_text(
            text=format_product_info(product_id, user_id),
            parse_mode="HTML"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        keyboard = [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text="–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_data or "quantity" not in user_data[user_id]:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    product_id = user_data[user_id]["product_id"]
    product = next(p for p in products if p["id"] == product_id)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await query.edit_message_text(
        text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n{format_product_info(product_id, user_id)}",
        parse_mode="HTML"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user_id, None)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."

@flask_app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), app.bot)
    app.update_queue.put(update)
    return 'ok'

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(about_company, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(contacts, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(show_category_products, pattern="^cat_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com/{TOKEN}"
    )

if __name__ == '__main__':
    main()
