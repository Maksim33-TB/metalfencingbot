from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', 8000))
TOKEN = '8159127478:AAHwjKl3zeZ3LZ4RgJgZ9X4Y1WOOKQFyZww'
ADMIN_CHAT_IDS = ['79100904945', '79032587332']

# ========== –î–ê–ù–ù–´–ï –û –¢–û–í–ê–†–ê–• ==========
categories = [
    {"id": "1", "name": "‚ùÑ –°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª–∏"},
    {"id": "2", "name": "ü™ú –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è"},
    {"id": "3", "name": "üî• –ü–æ–∂–∞—Ä–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "4", "name": "ü™ú –õ–µ—Å—Ç–Ω–∏—Ü—ã"},
    {"id": "5", "name": "üåâ –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –º–æ—Å—Ç–∏–∫–∏"}
]

products = {
    "1": [
        {
            "id": "1_1",
            "name": "–°–¢–° ¬´–ü–†–û–§¬ª",
            "description": (
                "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–ü–†–û–§¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫—Ä–æ–≤–µ–ª—å –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—à–µ –ù–°40 –∏ —Å–µ–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–∏ –ª—é–±–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.\n"
                "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢.\n"
                "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:\n"
                "1. –¢—Ä—É–±–∞ –ø–ª–æ—Å–∫–æ–æ–≤–∞–ª Zn 45√ó25 ‚Äì 2 —à—Ç.\n"
                "2. –ö—Ä–æ–Ω—à—Ç–µ–π–Ω —É—Å–∏–ª–µ–Ω–Ω—ã–π –°–¢–° —Å –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–π –±—É—Ç–∏–ª–æ-–∫–∞—É—á—É–∫–æ–≤–æ–π –ª–µ–Ω—Ç–æ–π, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π, —Ç–æ–ª—â–∏–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ 2 –º–º ‚Äì 4 —à—Ç.\n"
                "3. –ó–∞–≥–ª—É—à–∫–∏ 45—Ö25 ‚Äì 4 —à—Ç."
            ),
            "specs": ["–ö—Ä–æ–≤–ª—è –∏–∑ —Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª–∏", "–ö—Ä–æ–≤–ª—è –∏–∑ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–Ω—ã"],
            "coating": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": 3475, "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": 3735},
            "photo": "–°–¢–° ¬´–ü–†–û–§¬ª.jpg"
        },
        {
            "id": "1_2",
            "name": "–°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å–∏–ª–µ–Ω–Ω—ã–π¬ª",
            "description": (
                "–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å –°–¢–° ¬´–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å–∏–ª–µ–Ω–Ω—ã–π¬ª –¥–ª–∏–Ω–æ–π 3000 –º–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                "–ò–º–µ–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–∞ –∏ –ø–ª–æ—Å–∫–æ–æ–≤–∞–ª—å–Ω–æ–π —Ç—Ä—É–±—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏.\n"
                "–¢–æ–ª—â–∏–Ω–∞ –º–µ—Ç–∞–ª–ª–∞ —Ç—Ä—É–±—ã –Ω–µ –º–µ–Ω–µ–µ 1,5 –º–º, –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–∞ ‚Äî 2 –º–º."
            ),
            "specs": ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"],
            "coating": ["–¶–∏–Ω–∫", "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞"],
            "price": {"–¶–∏–Ω–∫": 2805, "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞": 3100},
            "photo": "–°–¢–° ¬´–£—Å–∏–ª–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π¬ª.jpg"
        }
    ],
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}
user_states = {}
user_selections = {}

# ========== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_carts[user_id] = []
    user_states[user_id] = "MAIN_MENU"
    user_selections[user_id] = {}

    keyboard = [
        [InlineKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")],
        [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –û–û–û ¬´–°–¢–°¬ª!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –í–°–ï —Ç–∏–ø—ã –∫—Ä–æ–≤–µ–ª—å, —Ü–µ–Ω—ã –∑–∞–≤–æ–¥–∞ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è, –æ—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç 1 –¥–Ω—è.\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω-—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫!"
    )

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode="HTML")

# ========== –û –ö–û–ú–ü–ê–ù–ò–ò ==========
async def about_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üèõ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
        "–ö–æ–º–ø–∞–Ω–∏—è –û–û–û ¬´–°–¢–°¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–æ–≤–ª–∏ —Å 2014 –≥–æ–¥–∞.\n"
        "–ù–∞ –Ω–∞—à–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n"
        "–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¢–ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n"
        "üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: <a href='https://—ç–±–∫-—Å—Ç—Å.—Ä—Ñ'>—ç–±–∫-—Å—Ç—Å.—Ä—Ñ</a>" 
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="HTML")

# ========== –ö–û–ù–¢–ê–ö–¢–´ ==========
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "üìß e-mail: ctcnet@yandex.ru\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    )
    keyboard = [
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="HTML")

# ========== –ö–ê–¢–ê–õ–û–ì ==========
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    user_states[user_id] = "CATALOG"

    keyboard = [[InlineKeyboardButton(cat["name"], callback_data=f"cat_{cat['id']}")] for cat in categories]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

# ========== –ü–†–û–î–£–ö–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ==========
async def show_category_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category_id = query.data.split("_")[1]
    user_id = str(query.from_user.id)
    user_states[user_id] = f"CATEGORY_{category_id}"

    if category_id not in products or len(products[category_id]) == 0:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = [[InlineKeyboardButton(product["name"], callback_data=f"prod_{product['id']}")] for product in products[category_id]]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å {categories[int(category_id)-1]['name']}:", 
                                reply_markup=reply_markup, parse_mode="HTML")

# ========== –ü–û–ö–ê–ó –ü–†–û–î–£–ö–¢–ê ==========
async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[1]
    user_id = str(query.from_user.id)

    found = False
    for cat in products.values():
        for p in cat:
            if p["id"] == product_id:
                found = True
                user_selections[user_id] = {
                    "product_id": product_id,
                    "product": p,
                    "selected_options": {}
                }
                user_states[user_id] = f"PRODUCT_{product_id}"

                keyboard = []
                if p.get("specs") and p["specs"][0] != "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
                    keyboard.append([InlineKeyboardButton("üìå –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data=f"spec_{product_id}")])

                if p.get("heights"):
                    keyboard.append([InlineKeyboardButton("üìê –í—ã—Å–æ—Ç–∞", callback_data=f"height_{product_id}")])

                if p.get("cross_tubes"):
                    keyboard.append([InlineKeyboardButton("üîß –ö–æ–ª-–≤–æ —Ç—Ä—É–±", callback_data=f"tube_{product_id}")])

                keyboard.append([InlineKeyboardButton("üé® –ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", callback_data=f"coating_{product_id}")])
                keyboard.append([InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_cart_{product_id}")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_{category_id}")])

                reply_markup = InlineKeyboardMarkup(keyboard)
                message = format_product_message(p)
                await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="HTML")
                photo_path = p.get("photo", "")
                if photo_path:
                    with open(photo_path, "rb") as photo:
                        await context.bot.send_photo(chat_id=query.message.chat_id, photo=photo)
                break

    if not found:
        await query.edit_message_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ========== –í–´–ë–û–† –ü–û–ö–†–´–¢–ò–Ø ==========
async def handle_coating_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, product_id = query.data.split("_")[1:]
    user_id = str(query.from_user.id)

    product = None
    for cat in products.values():
        for p in cat:
            if p["id"] == product_id:
                product = p
                break
        if product:
            break

    if not product:
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = [[InlineKeyboardButton(coat, callback_data=f"select_coating_{product_id}_{i}")]
                for i, coat in enumerate(product["coating"])]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prod_{product_id}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üõ° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:", reply_markup=reply_markup)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –ü–û–ö–†–´–¢–ò–Ø ==========
async def select_coating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, product_id, index = query.data.split("_")[1:]
    user_id = str(query.from_user.id)
    index = int(index)

    product = None
    for cat in products.values():
        for p in cat:
            if p["id"] == product_id:
                product = p
                break
        if product:
            break

    if not product:
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    selected_coating = product["coating"][index]
    user_selections[user_id]["selected_options"]["–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ"] = selected_coating

    if selected_coating == "–¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞":
        keyboard = [
            [InlineKeyboardButton("üé® –£–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç RAL", callback_data=f"enter_ral_{product_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"coating_{product_id}")]
        ]
        await query.edit_message_text(
            "üé® –í—ã –≤—ã–±—Ä–∞–ª–∏ –¶–∏–Ω–∫+–∫—Ä–∞—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É RAL Classic (—á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await select_quantity(update, context, product_id)

# ========== –í–í–û–î RAL –¶–í–ï–¢–ê ==========
async def enter_ral_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, product_id = query.data.split("_")
    user_id = str(update.effective_user.id)
    user_states[user_id] = f"AWAITING_RAL_{product_id}"
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ RAL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3005):")

# ========== –í–í–û–î –ö–û–õ–ò–ß–ï–°–¢–í–ê ==========
async def select_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id=None):
    if product_id is None:
        _, product_id = update.callback_query.data.split("_")[1:]

    user_id = str(update.effective_user.id)
    user_states[user_id] = f"AWAITING_QUANTITY_{product_id}"

    await update.callback_query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê ==========
async def handle_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_state = user_states.get(user_id, "")

    if not current_state.startswith("AWAITING_QUANTITY_"):
        return

    product_id = current_state.split("_")[2]
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    product = user_selections[user_id]["product"]
    coating = user_selections[user_id]["selected_options"].get("–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", "")
    price_per_item = product["price"].get(coating, 0) if coating else list(product["price"].values())[0]
    total_price = price_per_item * quantity
    user_selections[user_id]["selected_options"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = quantity
    user_selections[user_id]["selected_options"]["–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞"] = total_price

    summary = format_product_message(product, user_selections[user_id]["selected_options"])
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"confirm_add_{product_id}")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"prod_{product_id}")]
    ]

    await update.message.reply_text(summary + f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.", 
                                    reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ ==========
async def confirm_add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_id = query.data.split("_")[2]
    user_id = str(query.from_user.id)

    cart_item = {
        "product": user_selections[user_id]["product"],
        "selected_options": user_selections[user_id]["selected_options"].copy()
    }

    if user_id not in user_carts:
        user_carts[user_id] = []

    user_carts[user_id].append(cart_item)
    user_states[user_id] = "IN_CART"

    keyboard = [
        [InlineKeyboardButton("üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="form_order")],
        [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=reply_markup)

# ========== –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò ==========
async def form_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    user_states[user_id] = "ORDER_FORM_NAME"
    await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_state = user_states.get(user_id, "")

    if current_state.startswith("AWAITING_RAL_"):
        product_id = current_state.split("_")[2]
        ral_code = update.message.text.strip()

        if not (ral_code.isdigit() and len(ral_code) == 4):
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ RAL (4 —Ü–∏—Ñ—Ä—ã):")
            return

        user_selections[user_id]["selected_options"]["–¶–≤–µ—Ç, RAL Classic"] = f"RAL {ral_code}"
        await select_quantity(update, context, product_id)

    elif current_state.startswith("AWAITING_QUANTITY_"):
        await handle_quantity_input(update, context)

    elif current_state == "AWAITING_QUESTION":
        question = update.message.text
        await send_question_to_admin(update, context, question)

# ========== –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–° ==========
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    user_states[user_id] = "AWAITING_QUESTION"
    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

# ========== –û–¢–ü–†–ê–í–ö–ê –í–û–ü–†–û–°–ê –ê–î–ú–ò–ù–ê–ú ==========
async def send_question_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, question):
    user = update.effective_user
    message = (
        f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üì± ID: {user.id}\n"
        f"üìù –í–æ–ø—Ä–æ—Å: {question}"
    )
    for admin_id in ADMIN_CHAT_IDS:
        await context.bot.send_message(chat_id=admin_id, text=message, parse_mode="HTML")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts")]]
    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup(keyboard))

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def format_product_message(product, selected_options=None):
    message = f"üì¶ <b>{product['name']}</b>\n\n"
    message += f"üìù {product['description']}\n\n"
    
    if selected_options:
        for option, value in selected_options.items():
            message += f"üîπ {option}: {value}\n"
    
    message += "üí∞ –¶–µ–Ω–∞: "
    if isinstance(product['price'], dict):
        for coating, price in product['price'].items():
            message += f"{coating} ‚Äî {price} —Ä—É–±./—à—Ç\n"
    else:
        message += f"{product['price']} —Ä—É–±./—à—Ç\n"

    return message

# ========== –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ ==========
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(about_company, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(contacts, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(show_category_products, pattern="^cat_"))
    app.add_handler(CallbackQueryHandler(show_product, pattern="^prod_"))
    app.add_handler(CallbackQueryHandler(handle_coating_selection, pattern="^coating_"))
    app.add_handler(CallbackQueryHandler(select_coating, pattern="^select_coating_"))
    app.add_handler(CallbackQueryHandler(enter_ral_color, pattern="^enter_ral_"))
    app.add_handler(CallbackQueryHandler(confirm_add_to_cart, pattern="^confirm_add_"))
    app.add_handler(CallbackQueryHandler(form_order, pattern="^form_order$"))
    app.add_handler(CallbackQueryHandler(ask_question, pattern="^ask_question$"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://metalfencingbot.onrender.com/{TOKEN}" 
    )

if __name__ == "__main__":
    main()
